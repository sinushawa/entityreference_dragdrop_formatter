<?php

/**
 * @file
 * adds a formatter to entity references giving the ability to make them draggable, droppable or both at once, only works between 
 *
 */

 /**
 * Implements hook_field_formatter_info().
 */
function entityreference_dragdrop_formatter_field_formatter_info() {
  return array(
    'entityreference_dragdrop_formatter' => array( //Machine name of the formatter
      'label' => t('Entity reference drag & drop formatter'),
      'field types' => array('entityreference'), //This will only be available to entityreference fields
      'settings'  => array( //Array of the settings we'll create
        'dnd_status' => 'both', //give a default value for when the form is first loaded
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function entityreference_dragdrop_formatter_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  //This gets the view_mode where our settings are stored
  $display = $instance['display'][$view_mode];
  //This gets the actual settings
  $settings = $display['settings'];
  //Initialize the element variable
  $element = array();
  //Add your select box
  $element['dnd_status'] = array(
    '#type'           => 'select',                           // Use a select box widget
    '#title'          => t('drag & drop state'),                   // Widget label
    '#description'    => t('Select what status is available to the entity reference'), // Helper text
    '#default_value'  => $settings['dnd_status'],              // Get the value if it's already been set
    '#options'        => array(
      'none'  => 'None',
      'draggable' => 'Draggable',
      'droppable'  => 'Droppable',
      'both' => 'Both',
    ),
  );
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function entityreference_dragdrop_formatter_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = t('Use the status @status of the entity reference', array(
    '@status'     => $settings['dnd_status'],
  )); // we use t() for translation and placeholders to guard against attacks
  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function entityreference_dragdrop_formatter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array(); // Initialize the var
  $settings = $display['settings']; // get the settings
  $status = $settings['dnd_status']; // The drag & drop Status setting selected in the settings form
  foreach ($items as $delta => $item) {
    $query = db_select('node', 'n');
    $query->condition('n.nid', $item['target_id'], '=');
    $query->fields('n', array('title'));
    $label = $query->execute()->fetchField();
    $element[$delta] = array
    (

      '#markup' => check_plain($label),
      '#attached' => array
      (
        'library' => array
        (
          array('system', 'ui.droppable'),
        ),
        'js' => array
        (
          drupal_get_path('module', 'entityreference_dragdrop_formatter') . '/entityreference_dragdrop_formatter.js'
        )
      ),
      '#prefix' => '<div class="draggable droppable">',
      '#suffix' => '</div>'
    );
  }
  /*
  $options = array(
    'html'        => TRUE, // This tells Drupal that we're sending HTML, not plain text, otherwise it would encode it
    'attributes'  => array(
      'title' => $tooltip, // This sets our tooltip
      ),
    );
  if(isset($fb)) {
    $link = l($image, $fb, $options); // Create the Link
    $element[0]['#markup'] = $link; // Assign it to the #markup of the element
  }
  */
  return $element;
}